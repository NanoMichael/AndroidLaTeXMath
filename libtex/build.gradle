import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion compileSdk

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion compileSdk
        versionCode 1
        versionName "1.0.0"

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDirs 'src/main/libs'
    }

    def ndkBuild = ndkBuildCmd()

    task buildTeX(type: Exec) {
        workingDir file('src/main')
        commandLine ndkBuild
    }

    tasks.withType(JavaCompile) { task -> task.dependsOn buildTeX }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine ndkBuild, 'clean'
    }

    clean.dependsOn cleanNative

    tasks.withType(JavaCompile) {
        it.doLast { task ->
            println "COPY TEX RESOURCES INTO CLASSES"
            copy {
                from "${projectDir}/src/main/jni/tex/res"
                into "${task.destinationDir}/io/nano/tex/res"
            }
        }
    }
}

def ndkBuildCmd() {
    if (System.env.ANDROID_NDK_ROOT != null) return System.env.ANDROID_NDK_ROOT
    Properties prop = new Properties()
    prop.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = prop.getProperty('ndk.dir', null)
    if (ndkDir == null) throw new GradleException("NDK location not found.")
    def ndkBuild = ndkDir + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) ndkBuild += ".cmd"
    return ndkBuild
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

group = publishedGroupId
version = android.defaultConfig.versionName

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDesc
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDesc
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = libraryDesc
        }
    }
}
